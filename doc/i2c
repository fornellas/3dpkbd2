I2C

- Required sequence for master
	- Program the peripheral input clock in I2C_CR2 Register in order to generate correct timings
		- The peripheral input clock frequency must be at least:
			- 2 MHz in Sm mode
			- 4 MHz in Fm mode
	- Configure the clock control registers
	- Configure the rise time register
	- Program the I2C_CR1 register to enable the peripheral
	- Set the START bit in the I2C_CR1 register to generate a Start condition

- Master
	- initiates a data transfer
	- generates a clock signal
- Serial data transfer
	- begins with start condition
	- ends with stop condition
	- both generated by software
- data & address transfers
	- 8bit
	- First byte after start is address
	- 9th clock pulse after byte transfer
		- receiver must send ack to transmitter

- Master mode required sequence
	- Program the peripheral input clock in I2C_CR2 Register in order to generate correct timings
	- Configure the clock control registers
	- Configure the rise time register
	- Program the I2C_CR1 register to enable the peripheral
	- Set the START bit in the I2C_CR1 register to generate a Start condition
- Start condition
	- setting start bit
		- interface generates start condition
		- interface switches to master mode (MSL bit set) when BUSY bit is cleared
		- interface generates ReStart condition at the end of current byte transfer
	- once start condition is sent
		- SB bit is set by HW
		- interrupt generated if ITEVFEN bit set
	- master waits for
		- read of SR1 register
		- write in the DR register with Slave address
- Slave address transmission
	- one address byte is sent
	- the ADDR bit is set by HW
	- interrupt if generated if ITEVFEN bit is set
	- master waits for a read of SR1 register followed by a read of SR2 register
- Master transmitter
	- waits until first data byte is written into DR
	- when ack is received
		- TxE bit is set by HW
		- interrup is generated if ITEVFEN and ITBUFEN bits are set
	- if Txe is set and no data byte written in DR before end of last transmission
		- BTF is set
		- interface waits until BTF is cleared by writing to DR
	- Closing the communication
		- After last byte written to DR
			- STOP bit is set by software
			- must be programmed when either TxE or BTF is set